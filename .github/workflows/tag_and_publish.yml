name: Tag and Publish to NuGet

on:
  workflow_dispatch:
    inputs:
      publish_to_nuget:
        description: 'Publish to NuGet (true/false)'
        required: true
        default: 'false'
        type: boolean

jobs:
  tag-and-publish:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: Extract version from project file
      id: extract_version
      run: |
        $version = Select-Xml -Path "src/Aind.Ni.DigitalOutput.Configuration/Aind.Ni.DigitalOutput.Configuration.csproj" -XPath "//Version" | Select-Object -ExpandProperty Node | Select-Object -ExpandProperty InnerText
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Extracted version: $version"
      shell: pwsh
      
    - name: Create Git tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag v${{ steps.extract_version.outputs.VERSION }}
        git push origin v${{ steps.extract_version.outputs.VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore src/Aind.Ni.DigitalOutput.Configuration/Aind.Ni.DigitalOutput.Configuration.csproj
      
    - name: Build with CI flag (creates working assembly)
      run: dotnet build src/Aind.Ni.DigitalOutput.Configuration/Aind.Ni.DigitalOutput.Configuration.csproj --configuration Release --no-restore -p:CI_BUILD=true
      
    - name: Create NuGet package
      run: dotnet pack src/Aind.Ni.DigitalOutput.Configuration/Aind.Ni.DigitalOutput.Configuration.csproj --configuration Release --output ./artifacts --no-build -p:CI_BUILD=true
      
    - name: Verify package
      run: |
        echo "âœ… NuGet package created successfully with CI_BUILD flag"
        echo "Package contains pre-compiled assemblies that work with conditional compilation"
        echo "When installed on Windows with DAQmx, full functionality will be available"
        Get-ChildItem ./artifacts/*.nupkg | ForEach-Object {
          echo "Package: $($_.Name) ($($_.Length) bytes)"
        }
      shell: pwsh
      
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-v${{ steps.extract_version.outputs.VERSION }}
        path: ./artifacts/*.nupkg
        
    - name: Publish to NuGet
      if: ${{ inputs.publish_to_nuget == true }}
      run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      
    - name: Create GitHub Release
      if: ${{ inputs.publish_to_nuget == true }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.extract_version.outputs.VERSION }}
        release_name: Release v${{ steps.extract_version.outputs.VERSION }}
        body: |
          ## Changes in v${{ steps.extract_version.outputs.VERSION }}
          
          - Automated release from GitHub Actions
          - Package published to NuGet.org with pre-compiled assemblies
          - Full DAQmx functionality available on Windows with NI-DAQmx drivers
          
          ## Installation
          ```
          Install-Package Aind.Ni.DigitalOutput.Configuration -Version ${{ steps.extract_version.outputs.VERSION }}
          ```
          
          ## Requirements
          - Windows operating system
          - NI-DAQmx drivers installed
          - Bonsai framework
        draft: false
        prerelease: false