name: Tag and Publish to NuGet

on:
  workflow_dispatch:
    inputs:
      publish_to_nuget:
        description: 'Publish to NuGet (true/false)'
        required: true
        default: false
        type: boolean

jobs:
  tag-and-publish:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: Extract version from project file
      id: extract_version
      run: |
        $version = Select-Xml -Path "src/Aind.Ni.DigitalOutput.Configuration/Aind.Ni.DigitalOutput.Configuration.csproj" -XPath "//Version" | Select-Object -ExpandProperty Node | Select-Object -ExpandProperty InnerText
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Extracted version: $version"
      shell: pwsh
      
    - name: Create Git tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag v${{ steps.extract_version.outputs.VERSION }}
        git push origin v${{ steps.extract_version.outputs.VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore src/Aind.Ni.DigitalOutput.Configuration/Aind.Ni.DigitalOutput.Configuration.csproj
      
    - name: Build using Bonsai.DAQmx assemblies
      run: dotnet build src/Aind.Ni.DigitalOutput.Configuration/Aind.Ni.DigitalOutput.Configuration.csproj --configuration Release --no-restore
      
    - name: Remove <Platform>x64</Platform> from .csproj before packaging
      run: |
        $csproj = "src/Aind.Ni.DigitalOutput.Configuration/Aind.Ni.DigitalOutput.Configuration.csproj"
        (Get-Content $csproj) | Where-Object { $_ -notmatch '<Platform>x64</Platform>' } | Set-Content $csproj
      shell: pwsh
      
    - name: Create NuGet package
      run: |
        echo "üì¶ Creating NuGet package..."
        dotnet pack src/Aind.Ni.DigitalOutput.Configuration/Aind.Ni.DigitalOutput.Configuration.csproj --configuration Release --output ./artifacts --no-build
        echo "‚úÖ Package creation completed"
      shell: pwsh
      
    - name: Verify package creation
      run: |
        echo "‚úÖ NuGet package created successfully using Bonsai.DAQmx assemblies"
        echo "Package contains pre-compiled assemblies with full DAQmx functionality"
        echo "Works seamlessly with Bonsai.DAQmx package dependency"
        
        echo "Contents of artifacts directory:"
        if (Test-Path "./artifacts") {
          Get-ChildItem ./artifacts -Recurse | ForEach-Object {
            echo "File: $($_.Name) ($($_.Length) bytes)"
          }
        } else {
          echo "‚ùå Artifacts directory does not exist!"
          exit 1
        }
        
        echo "Verifying .nupkg files:"
        $nupkgFiles = Get-ChildItem ./artifacts/*.nupkg -ErrorAction SilentlyContinue
        if ($nupkgFiles) {
          $nupkgFiles | ForEach-Object {
            echo "‚úÖ Package: $($_.Name) ($($_.Length) bytes)"
          }
        } else {
          echo "‚ùå No .nupkg files found!"
          exit 1
        }
      shell: pwsh
      
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-v${{ steps.extract_version.outputs.VERSION }}
        path: ./artifacts/*.nupkg
        
    - name: Debug before publish
      if: ${{ inputs.publish_to_nuget == true }}
      run: |
        echo "üîç About to publish packages..."
        echo "Current directory: $(Get-Location)"
        
        if (Test-Path "./artifacts") {
          echo "‚úÖ Artifacts directory exists"
          $nupkgFiles = Get-ChildItem ./artifacts/*.nupkg -ErrorAction SilentlyContinue
          if ($nupkgFiles) {
            echo "‚úÖ Found $($nupkgFiles.Count) package(s) to publish:"
            $nupkgFiles | ForEach-Object {
              echo "  üì¶ $($_.Name) - $($_.FullName)"
            }
          } else {
            echo "‚ùå No .nupkg files found in artifacts directory!"
            echo "Directory contents:"
            Get-ChildItem ./artifacts -Recurse
            exit 1
          }
        } else {
          echo "‚ùå Artifacts directory does not exist!"
          exit 1
        }
      shell: pwsh
        
    - name: Publish to NuGet
      if: ${{ inputs.publish_to_nuget == true }}
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        echo "üöÄ Publishing packages to NuGet.org..."
        
        # Verify artifacts directory exists
        if (-not (Test-Path "./artifacts")) {
          echo "‚ùå Artifacts directory does not exist!"
          exit 1
        }
        
        # Build the exact package filename
        $packageName = "Aind.Ni.DigitalOutput.Configuration.${{ steps.extract_version.outputs.VERSION }}.nupkg"
        $packagePath = "./artifacts/$packageName"
        
        echo "üì¶ Looking for package: $packageName"
        echo "üìÇ Full path: $packagePath"
        
        # Verify the specific package file exists
        if (-not (Test-Path $packagePath)) {
          echo "‚ùå Package file does not exist: $packagePath"
          echo "Available files in artifacts directory:"
          Get-ChildItem ./artifacts -Recurse
          exit 1
        }
        
        echo "‚úÖ Found package: $packageName"
        $fileInfo = Get-Item $packagePath
        echo "üìä Package size: $($fileInfo.Length) bytes"
        
        echo "üì§ Publishing: $packageName"
        dotnet nuget push "$packagePath" --api-key $env:NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate
        
        if ($LASTEXITCODE -eq 0) {
          echo "‚úÖ Successfully published: $packageName"
        } else {
          echo "‚ùå Failed to publish: $packageName"
          exit 1
        }
        
        echo "üéâ Package published successfully!"
      shell: pwsh
      
    - name: Create GitHub Release
      if: ${{ inputs.publish_to_nuget == true }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.extract_version.outputs.VERSION }}
        release_name: Release v${{ steps.extract_version.outputs.VERSION }}
        body: |
          ## Changes in v${{ steps.extract_version.outputs.VERSION }}
          
          - Automated release from GitHub Actions
          - Package published to NuGet.org with pre-compiled assemblies
          - Full DAQmx functionality available on Windows with NI-DAQmx drivers
          
          ## Installation
          ```
          Install-Package Aind.Ni.DigitalOutput.Configuration -Version ${{ steps.extract_version.outputs.VERSION }}
          ```
          
          ## Requirements
          - Windows operating system
          - NI-DAQmx drivers installed
          - Bonsai framework
        draft: false
        prerelease: false